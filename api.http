@api_url = http://localhost:9000/api

###
# TRABAJO INTEGRADOR: API de Productos
#
# Este archivo contiene ejemplos de solicitudes para probar todos los endpoints
# de la API de productos.
#
# Para usarlo, asegúrate de tener la extensión "REST Client" en Visual Studio Code.
#
# NOTA: Los códigos de los productos y valores de productos pueden variar 
# dependiendo de cuál archivo JSON elijas para poblar tu base de datos. 
# Ajusta los valores de :codigo y otros campos según sea necesario.

###
# --- CRUD Básico Productos ---

### 1. Obtener todos los productos
# Devuelve la lista completa de productos.
GET {{api_url}}/productos
Accept: application/json

### 2. Obtener un producto por su código
# Reemplaza '1' con un código de producto que exista en tu base de datos.
GET {{api_url}}/productos/2020
Accept: application/json

### 2.1 Obtener un producto con un código inexistente (debería dar 404)
GET {{api_url}}/productos/9999
Accept: application/json

### 3. Crear un nuevo producto
# Este endpoint agrega un nuevo producto.
# Asegúrate de que el 'codigo' sea único.
POST {{api_url}}/productos
Content-Type: application/json

{
    "codigo": 1029,
    "nombre": "Teclado Luminoso RGBA",
    "precio": 75.50,
    "categoria": ["Accesorios", "Computación", "Gaming"]
}

### 4. Modificar un producto existente
# Reemplaza '1' con un código de producto que exista.
# Solo se necesita enviar los campos a modificar.
PUT {{api_url}}/productos/1029
Content-Type: application/json

{
    "precio": 75
}

### 5. Eliminar un producto
# Reemplaza '2' con un código de producto que desees eliminar.
DELETE {{api_url}}/productos/2030
Accept: application/json


###
# --- Endpoints Adicionales ---

### 6. Buscar productos por término
# Busca productos que contengan 'Laptop' en su nombre.
GET {{api_url}}/productos/buscar?q=imp
Accept: application/json

### 7. Filtrar productos por categoría
# Busca productos que pertenezcan a la categoría 'Accesorios'.
GET {{api_url}}/productos/categoria/Accesorios
Accept: application/json

### 8. Filtrar productos por rango de precio
# Busca productos con precios entre 100 y 500.
GET {{api_url}}/productos/precio/10/ab
Accept: application/json

### 9. Carga masiva de productos
# Agrega múltiples productos en una sola petición.
POST {{api_url}}/productos/masivo
Content-Type: application/json

[
    {
        "codigo": 2010,
        "nombre": "Monitor Gamer 27 pulgadas",
        "precio": 399.99,
        "categoria": ["Monitores", "Computación", "Gaming"]
    },
    {
        "codigo": 2020,
        "nombre": "Silla Gamer Ergonómica",
        "precio": 249.50,
        "categoria": ["Computación", "Gaming"]
    },
    {
        "codigo": 2030,
        "nombre": "Silla Gamer Malarda",
        "precio": 299.50,
        "categoria": ["Computación", "Gaming"]
    }
]

### 9. Carga masiva de productos desde computacion.js
# Agrega múltiples productos en una sola petición.
POST {{api_url}}/productos/upload
Content-Type: application/json



# --- CRUD Básico Usuarios ---

### 1. Obtener todos los usuarios.
# Devuelve la lista completa de usuarios.
GET {{api_url}}/usuarios
Accept: application/json

### 2. Obtener un usuarios por su id.
# Reemplaza ':id' con un id de usuarios que exista en tu base de datos.
GET {{api_url}}/usuarios/68684f5bdf67a1110da20071
Accept: application/json

### 2.1 Obtener un usuarios con un id inexistente (debería dar 404).
GET {{api_url}}/usuarios/7868500764bcfa12e1b99ac2
Accept: application/json

### 3. Registrar un usuario.
# Este endpoint registra un nuevo usuarios.
POST {{api_url}}/usuarios/register
Content-Type: application/json

{
    "email": "benjapey@gmail.com",
    "password": "Benja1234",
    "name":"Benjamin Peyraga"
}

### 4. Loguear un usuario y alamacenar el token en cookies.
# Este endpoint autentica las credenciales y crea laa cookie token.
POST {{api_url}}/usuarios/login
Content-Type: application/json

{
    "email": "benjapey99@gmail.com",
    "password": "Benja1234"
}

### 5. Cerrar sesion de un usuario y eliminar la cookie con el token.
# Este endpoint cierra la sesion eliminando la cookie.
POST {{api_url}}/usuarios/signout
Content-Type: application/json


### 6. Modificar un usuario existente.
# Reemplaza '1' con un id de usuario que exista.
# Solo se necesita enviar los campos a modificar.
PUT {{api_url}}/usuarios/68684f5bdf67a1110da20071
Content-Type: application/json

{
    "name": "Benjamin Peyraga"
}

### 7. Eliminar un usuarios.
# Reemplaza '2' con un id de usuario que desees eliminar.
DELETE {{api_url}}/usuarios/6868500764bcfa12e1b99ac2
Accept: application/json