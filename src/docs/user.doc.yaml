components:
  schemas:
    Usuarios:
      type: object
      properties:
        name:
          description: Nombre del usuario.
          type: string
        email:
          description: Correo electrónico del usuario.
          type: string
          format: email
        password:
          description: Contraseña del usuario.
          type: string
          format: password
        role:
          description: Rol del usuario.
          type: string
          enum: ["USER", "ADMIN"]
          default: "USER"
        createdAt:
          type: string
          format: date-time
          description: "Timestamp of when the user was created."
        updatedAt:
          type: string
          format: date-time
          description: "Timestamp of the last update."
        __v:
          type: integer
          description: "Versión interna del documento (MongoDB)."
      required:
        - email
        - password
        - name
      example:
        _id: "67a15897c66d2be27a674932"
        email: "benjapey@hotmail.com"
        password: "Benja1234"
        name: "Benjamin Peyraga"
        role: "ADMIN"
        CreatedAt: "2025-03-09T02:15:41.340Z"
        updatedAt: "2025-03-09T02:15:41.340Z"
        __v: 0

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token

  responses:
    fatal500:
      description: Error interno del servidor.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: "Error interno del servidor."
                example: "EError interno del servidor."

paths:
  /api/usuarios/:
    get:
      summary: Ver todos los usuarios registrados.
      tags:
        - Usuarios
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Usuarios encontrados correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    description: "Usuarios encontrados correctamente."
                    example: "Usuarios encontrados correctamente."
                  usuarios:
                    type: array
                    description: "Listado de usuarios encontrados."
                    items:
                      $ref: "#/components/schemas/Usuarios"
        "500":
          $ref: "#/components/responses/fatal500"

  /api/usuarios/{id}:
    get:
      summary: Ver todos los usuarios registrados.
      tags:
        - Usuarios
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: "ID del usuario a buscar."
      responses:
        "200":
          description: Usuario encontrado correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    description: "Usuario encontrado correctamente."
                    example: "Usuario encontrado correctamente."
                  usuario:
                    type: object
                    description: "Usuario encontrado."
                    $ref: "#/components/schemas/Usuarios"

        "404":
          description: El usuario no existe.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    description: "El usuario no existe."
                    example: "El usuario no existe."

        "500":
          $ref: "#/components/responses/fatal500"
    
    put:
      summary: Actualizar un usuario existente buscado por ID.
      tags:
        - Usuarios
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: "ID del usuario a buscar."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "benjapey99@gmail.com"
                password:
                  type: string
                  format: password
                  example: "Hola1234"
                name:
                  type: string
                  example: "Benjamin Peyraga"
      responses:
        "200":
          description: Usuario actualizado correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    description: "Usuario actualizado correctamente."
                    example: "Usuario actualizado correctamente."
                  usuarioActualizado:
                    type: object
                    description: "Usuario actualizado."
                    $ref: "#/components/schemas/Usuarios"

        "401":
          description: Usuario no existente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    description: "Usuario no existente."
                    example: "Usuario no existente."

        "500":
          $ref: "#/components/responses/fatal500"
    
    delete:
      summary: Eliminar un usuario existente buscado por ID.
      tags:
        - Usuarios
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: "ID del usuario a buscar."
      responses:
       responses:
        "200":
          description: Usuario eliminado correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    description: "Usuario eliminado correctamente."
                    example: "Usuario eliminado correctamente."
                  usuarioEliminado:
                    type: object
                    description: "Usuario eliminado."
                    $ref: "#/components/schemas/Usuarios"

        "401":
          description: Usuario no existente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    description: "Usuario no existente."
                    example: "Usuario no existente."

        "500":
          $ref: "#/components/responses/fatal500"

  /api/usuarios/register:
    post:
      summary: Registra al usuario en la base de datos.
      tags:
        - Usuarios
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "benjapey99@gmail.com"
                password:
                  type: string
                  format: password
                  example: "Hola1234"
                name:
                  type: string
                  example: "Benjamin Peyraga"
                role:
                  type: string
                  example: "USER"
      responses:
        "201":
          description: Usuario creado correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    description: "Usuario creado correctamente."
                    example: "Usuario creado correctamente."
                  usuarioNuevo:
                    type: object
                    $ref: "#/components/schemas/Usuarios"
        "400":
          description: Datos inválidos o email existente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    description: "Datos inválidos o email existente"
                    example: "Datos inválidos o email existente"
        "500":
          $ref: "#/components/responses/fatal500"

  /api/usuarios/login:
    post:
      summary: Iniciar sesión con usuario previamente registrado (incluye guardado de token en cookie).
      tags:
        - Usuarios
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "benjapey99@gmail.com"
                password:
                  type: string
                  format: password
                  example: "Benja1234"
      responses:
        "200":
          description: Inicio de sesión exitoso. Token guardado en la cookie.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    description: "Usuario logueado correctamente."
                    example: "Usuario logueado correctamente."
        "401":
          description: Contraseña invalida.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    description: "Contraseña invalida."
                    example: "Contraseña invalida."
        "404":
          description: Usuario no existente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    description: "Usuario no existente."
                    example: "Usuario no existente.."
        "500":
          $ref: "#/components/responses/fatal500"

  /api/usuarios/signout:
    post:
      summary: Cerrar sesión, eliminando la cookie con el token.
      tags:
        - Usuarios
      responses:
        "200":
          description: Usuario signout correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    description: "Usuario signout correctamente."
                    example: "Usuario signout correctamente."
        "500":
          $ref: "#/components/responses/fatal500"

